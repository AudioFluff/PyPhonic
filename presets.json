[
    {
        "id": 1,
        "name": "Init (Plain Python)",
        "code": "import pyphonic\ndef process(midi, audio):\n    return midi, audio"
    },
    {
        "id": 2,
        "name": "Init (Python with NumPy)",
        "code": "import numpy as np\nimport pyphonic\ndef process_npy(midi, audio):\n    return midi, audio"
    },
    {
        "id": 3,
        "name": "Butterworth Filter (High, Low or Bandpass)",
        "code": "import pyphonic\n\nimport numpy as np\nfrom scipy.signal import butter, sosfilt\n\norder = 6\nfs = None\nsos = None\ncutoff = 500\nZl, Zr = None, None\n\ndef process_npy(midi, audio):\n    global Zl, Zr, fs, sos\n    if fs is None:\n        fs = pyphonic.getSampleRate()\n        sos = butter(order, cutoff, fs=fs, btype='lowpass', analog=False, output='sos')\n        Zl = np.zeros((sos.shape[0], 2))\n        Zr = np.zeros((sos.shape[0], 2))\n        return midi, audio\n    left = audio[:audio.shape[0]//2]\n    right = audio[audio.shape[0]//2:]\n    left, Zl = sosfilt(sos, left, zi=Zl)\n    right, Zr = sosfilt(sos, right, zi=Zr)\n    return midi, np.concatenate((left, right))"
    }
]